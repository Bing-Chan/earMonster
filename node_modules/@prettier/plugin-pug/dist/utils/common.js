"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectFramework = exports.detectDangerousQuoteCombination = exports.makeString = exports.handleBracketSpacing = exports.isMultilineInterpolation = exports.isSingleLineWithInterpolation = exports.isQuoted = exports.isWrappedWith = exports.isStyleAttribute = exports.unwrapLineFeeds = exports.previousTypeAttributeToken = exports.previousNormalAttributeToken = exports.previousTagToken = void 0;
function previousTagToken(tokens, index) {
    for (let i = index - 1; i >= 0; i--) {
        const token = tokens[i];
        if (!token) {
            return;
        }
        if (token.type === 'tag') {
            return token;
        }
    }
    return;
}
exports.previousTagToken = previousTagToken;
function previousNormalAttributeToken(tokens, index) {
    for (let i = index - 1; i > 0; i--) {
        const token = tokens[i];
        if (!token || token.type === 'start-attributes') {
            return;
        }
        if (token.type === 'attribute') {
            if (token.name !== 'class' && token.name !== 'id') {
                return token;
            }
        }
    }
    return;
}
exports.previousNormalAttributeToken = previousNormalAttributeToken;
function previousTypeAttributeToken(tokens, index) {
    for (let i = index - 1; i > 0; i--) {
        const token = tokens[i];
        if (!token || token.type === 'start-attributes' || token.type === 'tag') {
            return;
        }
        if (token.type === 'attribute') {
            if (token.name === 'type') {
                return token;
            }
        }
    }
    return;
}
exports.previousTypeAttributeToken = previousTypeAttributeToken;
function unwrapLineFeeds(value) {
    return value.includes('\n')
        ? value
            .split('\n')
            .map((part) => part.trim())
            .map((part) => (part[0] === '.' ? '' : ' ') + part)
            .join('')
            .trim()
        : value;
}
exports.unwrapLineFeeds = unwrapLineFeeds;
function isStyleAttribute(name, val) {
    return name === 'style' && isQuoted(val);
}
exports.isStyleAttribute = isStyleAttribute;
function isWrappedWith(val, start, end, offset = 0) {
    return (val.startsWith(start, offset) && val.endsWith(end, val.length - offset));
}
exports.isWrappedWith = isWrappedWith;
function isQuoted(val) {
    if (/^(["'`])(.*)\1$/.test(val)) {
        const regex = new RegExp(`${val[0]}(?<!\\\\${val[0]})`);
        return !regex.test(val.slice(1, -1));
    }
    return false;
}
exports.isQuoted = isQuoted;
function isSingleLineWithInterpolation(val) {
    return /^`[\s\S]*`$/.test(val) && val.includes('${');
}
exports.isSingleLineWithInterpolation = isSingleLineWithInterpolation;
function isMultilineInterpolation(val) {
    return /^`[\s\S]*`$/m.test(val) && val.includes('\n');
}
exports.isMultilineInterpolation = isMultilineInterpolation;
function handleBracketSpacing(bracketSpacing, code, [opening, closing] = ['{{', '}}']) {
    return bracketSpacing
        ? `${opening} ${code} ${closing}`
        : `${opening}${code}${closing}`;
}
exports.handleBracketSpacing = handleBracketSpacing;
function makeString(rawContent, enclosingQuote, unescapeUnnecessaryEscapes = false) {
    const otherQuote = enclosingQuote === '"' ? "'" : '"';
    const newContent = rawContent.replace(/\\([\s\S])|(['"])/g, (match, escaped, quote) => {
        if (escaped === otherQuote) {
            return escaped;
        }
        if (quote === enclosingQuote) {
            return `\\${quote}`;
        }
        if (quote) {
            return quote;
        }
        return unescapeUnnecessaryEscapes &&
            /^[^\\nrvtbfux\r\n\u2028\u2029"'0-7]$/.test(escaped)
            ? escaped
            : `\\${escaped}`;
    });
    return enclosingQuote + newContent + enclosingQuote;
}
exports.makeString = makeString;
function detectDangerousQuoteCombination(code, quotes, otherQuotes, logger) {
    const q1 = code.indexOf(quotes);
    const q2 = code.indexOf(otherQuotes);
    const qb = code.indexOf('`');
    if (q1 >= 0 && q2 >= 0 && q2 > q1 && (qb < 0 || q1 < qb)) {
        logger.log({ code, quotes, otherQuotes, q1, q2, qb });
        return true;
    }
    return false;
}
exports.detectDangerousQuoteCombination = detectDangerousQuoteCombination;
function detectFramework() {
    try {
        const npmPackages = Object.keys(process.env)
            .filter((key) => key.startsWith('npm_package_'))
            .filter((key) => /(dev)?[Dd]ependencies_+/.test(key));
        if (npmPackages.some((pack) => pack.includes('vue') && !pack.includes('vuepress'))) {
            return 'vue';
        }
        else if (npmPackages.some((pack) => pack.includes('svelte'))) {
            return 'svelte';
        }
        else if (npmPackages.some((pack) => pack.includes('angular'))) {
            return 'angular';
        }
    }
    catch (_a) {
        return 'auto';
    }
    return 'auto';
}
exports.detectFramework = detectFramework;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFXQSxTQUFnQixnQkFBZ0IsQ0FDOUIsTUFBNEIsRUFDNUIsS0FBYTtJQUViLEtBQUssSUFBSSxDQUFDLEdBQVcsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzNDLE1BQU0sS0FBSyxHQUFzQixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLE9BQU87U0FDUjtRQUNELElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUU7WUFDeEIsT0FBTyxLQUFLLENBQUM7U0FDZDtLQUNGO0lBQ0QsT0FBTztBQUNULENBQUM7QUFkRCw0Q0FjQztBQVNELFNBQWdCLDRCQUE0QixDQUMxQyxNQUE0QixFQUM1QixLQUFhO0lBRWIsS0FBSyxJQUFJLENBQUMsR0FBVyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDMUMsTUFBTSxLQUFLLEdBQXNCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssa0JBQWtCLEVBQUU7WUFDL0MsT0FBTztTQUNSO1FBQ0QsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBRTtZQUM5QixJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFO2dCQUNqRCxPQUFPLEtBQUssQ0FBQzthQUNkO1NBQ0Y7S0FDRjtJQUNELE9BQU87QUFDVCxDQUFDO0FBaEJELG9FQWdCQztBQVNELFNBQWdCLDBCQUEwQixDQUN4QyxNQUE0QixFQUM1QixLQUFhO0lBRWIsS0FBSyxJ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