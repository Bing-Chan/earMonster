"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultOptions = exports.options = exports.printers = exports.parsers = exports.languages = exports.plugin = void 0;
const pug_lexer_1 = __importDefault(require("pug-lexer"));
const logger_1 = require("./logger");
const options_1 = require("./options");
const converge_1 = require("./options/converge");
const printer_1 = require("./printer");
const logger = (0, logger_1.createLogger)(console);
if (process.env.NODE_ENV === 'test') {
    logger.setLogLevel(logger_1.LogLevel.DEBUG);
}
exports.plugin = {
    languages: [
        {
            name: 'Pug',
            parsers: ['pug'],
            tmScope: 'text.jade',
            aceMode: 'jade',
            codemirrorMode: 'pug',
            codemirrorMimeType: 'text/x-pug',
            extensions: ['.jade', '.pug'],
            linguistLanguageId: 179,
            vscodeLanguageIds: ['jade', 'pug'],
        },
    ],
    parsers: {
        pug: {
            parse(text, parsers, options) {
                logger.debug('[parsers:pug:parse]:', { text });
                let trimmedAndAlignedContent = text.replace(/^\s*\n/, '');
                const contentIndentation = /^\s*/.exec(trimmedAndAlignedContent);
                if (contentIndentation === null || contentIndentation === void 0 ? void 0 : contentIndentation[0]) {
                    const contentIndentationRegex = new RegExp(`(^|\\n)${contentIndentation[0]}`, 'g');
                    trimmedAndAlignedContent = trimmedAndAlignedContent.replace(contentIndentationRegex, '$1');
                }
                const content = trimmedAndAlignedContent;
                const tokens = (0, pug_lexer_1.default)(content);
                return { content, tokens };
            },
            astFormat: 'pug-ast',
            hasPragma(text) {
                return (text.startsWith('//- @prettier\n') || text.startsWith('//- @format\n'));
            },
            locStart(node) {
                logger.debug('[parsers:pug:locStart]:', { node });
                return 0;
            },
            locEnd(node) {
                logger.debug('[parsers:pug:locEnd]:', { node });
                return 0;
            },
            preprocess(text, options) {
                logger.debug('[parsers:pug:preprocess]:', { text });
                return text;
            },
        },
    },
    printers: {
        'pug-ast': {
            print(path, options, print) {
                const entry = path.stack[0];
                const { content, tokens } = entry;
                const pugOptions = (0, converge_1.convergeOptions)(options);
                const printer = new printer_1.PugPrinter(content, tokens, pugOptions);
                const result = printer.build();
                logger.debug('[printers:pug-ast:print]:', result);
                return result;
            },
            embed(path, print, textToDoc, options) {
                return null;
            },
            insertPragma(text) {
                return `//- @prettier\n${text}`;
            },
        },
    },
    options: options_1.options,
    defaultOptions: {},
};
exports.languages = exports.plugin.languages;
exports.parsers = exports.plugin.parsers;
exports.printers = exports.plugin.printers;
exports.options = exports.plugin.options;
exports.defaultOptions = exports.plugin.defaultOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBYUEsMERBQTRCO0FBRTVCLHFDQUFrRDtBQUVsRCx1Q0FBa0Q7QUFDbEQsaURBQXFEO0FBRXJELHVDQUF1QztBQUV2QyxNQUFNLE1BQU0sR0FBVyxJQUFBLHFCQUFZLEVBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0MsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxNQUFNLEVBQUU7SUFDbkMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxpQkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3BDO0FBU1ksUUFBQSxNQUFNLEdBQVc7SUFDNUIsU0FBUyxFQUFFO1FBQ1Q7WUFDRSxJQUFJLEVBQUUsS0FBSztZQUNYLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQztZQUNoQixPQUFPLEVBQUUsV0FBVztZQUNwQixPQUFPLEVBQUUsTUFBTTtZQUNmLGNBQWMsRUFBRSxLQUFLO1lBQ3JCLGtCQUFrQixFQUFFLFlBQVk7WUFDaEMsVUFBVSxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQztZQUM3QixrQkFBa0IsRUFBRSxHQUFHO1lBQ3ZCLGlCQUFpQixFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQztTQUNuQztLQUNGO0lBRUQsT0FBTyxFQUFFO1FBQ1AsR0FBRyxFQUFFO1lBQ0gsS0FBSyxDQUNILElBQVksRUFDWixPQUF5QyxFQUN6QyxPQUFzQjtnQkFFdEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBRS9DLElBQUksd0JBQXdCLEdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ2xFLE1BQU0sa0JBQWtCLEdBQTJCLE1BQU0sQ0FBQyxJQUFJLENBQzVELHdCQUF3QixDQUN6QixDQUFDO2dCQUNG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