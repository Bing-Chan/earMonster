"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.partialSort = exports.stableSort = exports.compareAttributeToken = void 0;
function compareAttributeToken(a, b, sortAttributes, sortAttributesBeginning, sortAttributesEnd) {
    const sortPatternsBeginning = sortAttributesBeginning
        .map((sort) => new RegExp(sort))
        .reverse();
    const sortPatternsEnd = sortAttributesEnd.map((sort) => new RegExp(sort));
    const aName = a.name;
    const bName = b.name;
    if (sortPatternsBeginning.length > 0) {
        const aBeginningIndex = sortPatternsBeginning.findIndex((pattern) => pattern.test(aName));
        const bBeginningIndex = sortPatternsBeginning.findIndex((pattern) => pattern.test(bName));
        const beginning = aBeginningIndex - bBeginningIndex;
        if (beginning > 0) {
            return -1;
        }
        if (beginning < 0) {
            return 1;
        }
    }
    if (sortPatternsEnd.length > 0) {
        const aEndIndex = sortPatternsEnd.findIndex((pattern) => pattern.test(aName));
        const bEndIndex = sortPatternsEnd.findIndex((pattern) => pattern.test(bName));
        const end = aEndIndex - bEndIndex;
        if (end > 0) {
            return 1;
        }
        if (end < 0) {
            return -1;
        }
    }
    switch (sortAttributes) {
        case 'asc': {
            if (aName > bName) {
                return 1;
            }
            if (aName < bName) {
                return -1;
            }
            break;
        }
        case 'desc': {
            if (aName > bName) {
                return -1;
            }
            if (aName < bName) {
                return 1;
            }
            break;
        }
    }
    return 0;
}
exports.compareAttributeToken = compareAttributeToken;
function stableSort(array, compare) {
    const entries = array.map((value, index) => [
        value,
        index,
    ]);
    entries.sort((a, b) => {
        const order = compare(a[0], b[0]);
        return order !== 0 ? order : a[1] - b[1];
    });
    return entries.map(([value]) => value);
}
exports.stableSort = stableSort;
function partialSort(arr, start, end, compareFn) {
    const preSort = arr.slice(0, start);
    const postSort = arr.slice(end);
    const attributes = arr.slice(start, end);
    const sorted = stableSort(attributes, compareFn);
    return [...preSort, ...sorted, ...postSort];
}
exports.partialSort = partialSort;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvb3B0aW9ucy9hdHRyaWJ1dGUtc29ydGluZy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFrQkEsU0FBZ0IscUJBQXFCLENBQ25DLENBQWlCLEVBQ2pCLENBQWlCLEVBQ2pCLGNBQWlDLEVBQ2pDLHVCQUFpQyxFQUNqQyxpQkFBMkI7SUFFM0IsTUFBTSxxQkFBcUIsR0FBYSx1QkFBdUI7U0FDNUQsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMvQixPQUFPLEVBQUUsQ0FBQztJQUNiLE1BQU0sZUFBZSxHQUFhLGlCQUFpQixDQUFDLEdBQUcsQ0FDckQsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUMzQixDQUFDO0lBRUYsTUFBTSxLQUFLLEdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUM3QixNQUFNLEtBQUssR0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBRTdCLElBQUkscUJBQXFCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNwQyxNQUFNLGVBQWUsR0FBVyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUMxRSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUNwQixDQUFDO1FBQ0YsTUFBTSxlQUFlLEdBQVcscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FDMUUsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FDcEIsQ0FBQztRQUVGLE1BQU0sU0FBUyxHQUFXLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDNUQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFO1lBQ2pCLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDWDtRQUNELElBQUksU0FB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