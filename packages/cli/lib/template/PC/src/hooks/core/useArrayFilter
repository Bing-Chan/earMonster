import type { ComputedRef } from 'vue';
import { computed, unref } from 'vue';
import type { MaybeRefOrGetter, AnyFn } from '../type';


function toValue<T>(r: MaybeRefOrGetter<T>): T {
	return typeof r === 'function' ? (r as AnyFn)() : unref(r);
}


export function useArrayFilter<T>(
	list: MaybeRefOrGetter<MaybeRefOrGetter<T>[]>,
	fn: (element: T, index: number, array: T[]) => boolean
): ComputedRef<T[]> {
	return computed(() =>
		toValue(list)
			.map((i) => toValue(i))
			.filter(fn)
	);
}

